
Availability
============

The source code for this package is available from
http://www.gene.com/share/gmap.  License terms are provided in the
COPYING file.


Building and installing GMAP
============================

Prerequisites: a Unix system, a C compiler, and Perl

Step 1: Set your site-specific variables by editing the file
config.site.  In particular, you must set appropriate values for
"prefix" and "with_gmapdb", as explained in that file.

Step 2: Build, test, and install the programs, by running the
following GNU commands

    ./configure
    make
    make check
    make install

Note: Instead of editing the config.site file in step 1, you may type
everything on the command line for the ./configure script in step 2,
like this

    ./configure --prefix=/your/usr/local/path --with-gmapdb=/path/to/gmapdb


Downloading a GMAP database
===========================

You can use the program gmap_setup to build your own database (as
described below), but you can started quickly by downloading a
pre-built GMAP database from the same place you obtained the GMAP
program (see above for URL).  

Place the database in the GMAPDB directory you specified in the
config.site file when you built the gmap program.  You should include
a subdirectory for each GMAP database; for example, if you downloaded
a database called NHGD_R35, your directory structure should look like
this

    /path/to/gmapdb/NHGD_R35/
    /path/to/gmapdb/NHGD_R35/NHGD_R35.chromosome
    /path/to/gmapdb/NHGD_R35/NHGD_R35.chromosome.iit
    ...
    /path/to/gmapdb/NHGD_R35/NHGD_R35.version


Building a GMAP database
========================

The program gmap_setup can build and install a GMAP database from a
set of FASTA files containing either entire chromosomes or contigs
that represent pieces of chromosomes.  This program requires that the
sequences in the FASTA file have a mapping onto chromosomal
coordinates.  This mapping is in a file typically called coords.txt,
with one line per sequence in the following format

<contig_name>	<chromosomal_mapping>	<optional_strain>

where the chromosomal_mapping is in the form
<chr_name>:<start>..<end>.  Here are some examples:

NT_077911.1	1:217281..257582
NT_091704.1	22U:1..166566

If you want the contig to be inserted as its reverse complement, then
list the coordinates in the reverse direction (starting with the
higher number), like this:

NT_039199.1	1:61563373..61273712


Two utility programs, fa_coords and md_coords, are included for
generating coords.txt from either the FASTA files themselves or from
the seq_contig.md file included in NCBI genome releases.  If the FASTA
files are used, each header line must have some indication of at least
the chromosome, in one of these forms

    /chr=1:217281..257582
    /chr=1
    chromosome:NCBI35:22:1:49554710:1                                    [Ensembl format]
    /chromosome=2
    /chromosome=2 /alignment=(88840247-88864134) /orientation=rev        [Celera format]
    chr1:217281..257582
    chr1
    Chr1

If only the chromosome is specified, without coordinates, the program
will assign chromosomal coordinates by concatenating the contigs within
each chromosome.

In summary, then, here are the steps for building a GMAP DB file:

1.  Create coords.txt, by running either

    a.  md_coords seq_contig.md
    b.  fa_coords <fasta_file>...

2.  Run:  gmap_setup -d <genome> <fasta_file>...

    This command creates a file called Makefile.<genome>

3.  Execute the commands in the Makefile, by running

    make -f Makefile.<genome> all
    make -f Makefile.<genome> install

The notation <fasta_file>... above indicates that multiple files can
be listed.  The files can be in any order, and the contigs can be in
any order within these files.  The program will assemble the contigs
and chromosomes into their appropriate order.


Advanced notes:

1.  If your FASTA files contain separate sequences without any
chromosomal information, you can treat each sequence as its own
"chromosome" by using the -C flag, like this:

    fa_coords -C <fasta_file>...


2.  If you need to do pre-processing of FASTA files before using these
programs, perhaps because you need to insert chromosomal information
in the header lines, you can specify a command instead of multiple
fasta_files, like this:

    fa_coords -E 'cat *.fa | ./my-processing-program.pl'
    gmap_setup -d <genome> -E 'cat *.fa | ./my-processing-program.pl'


3.  After creating coords.txt, you may edit it directly if you want to
make changes.  You may delete lines or comment them out with a '#'
character, which will effectively omit those contigs from your genome
build.  You may also change chromosomal assignments (in column 2) or
assign contigs to alternative strains (in column 3).


4.  If your genomic FASTA files have lower-case characters or
non-standard characters (other than A, C, G, T, N, or X), and you
wish to make these available in the alignment, you may run gmap_setup
with the -G flag.  You can specify -G either in the initial run, or
run gmap_setup a second time with the -G flag.  

Normally, gmap_setup creates only a compressed version of the genome,
in the file <genome>.genomecomp, which can hold only the standard,
upper-case A, C, G, T, N, and X characters.  If you want the genome to
contain lower-case or other non-standard characters, you can create a
full, uncompressed version of the genome by specifying the -G flag,
which then creates another file called <genome>.genome, which can
represent all ASCII characters.

This full genome can then be used by GMAP instead of the compressed
genome by specifying the -G flag to GMAP.  Note that a full genome
file has a size equal to the total genome length, and some computers
cannot handle files larger than 2 gigabytes.  In such cases, only the
standard compressed genome will work.

Note, however, that the full genome does not affect the mapping stage
of GMAP, and generally does not affect the final alignment result.
(It affects the alignment only if you have non-standard characters,
those other than a, c, g, or t, which GMAP will then use for
alignment.)  Using the -G flag to GMAP affects only the printed
representation of the alignment when you specify the -A flag to GMAP,
which will then contain the lower-case or non-standard characters.



Running GMAP
============

To see the full set of options, type "gmap --help".  The following are
some common examples of usage.  For more examples, see the document
available at http://www.gene.com/share/gmap/paper/demo-slides.pdf

For each of the examples below, we assume that you have installed a
genome database called NHGD_R35 in your GMAPDB directory.  (If your
database is located elsewhere, you can specify the -D flag to gmap or
set the environment variable GMAPDB to point to that directory.)

* Mapping only: To map one or more cDNAs in a FASTA file onto a
  genome, run GMAP as follows:

    gmap -d NHGD_R35 <cdna_file>


* Mapping and alignment: If you want to map and align the cDNAs, add
  the -A flag:

    gmap -d NHGD_R35 -A <cdna_file>


* Alignment only: To align one or more cDNAs in a FASTA file onto a
  given genomic segment (also in a FASTA file), use the -g flag
  instead of the -d flag:

    gmap -g <genome_segment> -A <cdna_file>


* Batch mode: If you have a large number of cDNAs to run, and you have
  sufficient RAM (see below for guidelines) to run in batch mode, 
  add the "-B 1" or "-B 2" option:

    gmap -d NHGD_R35 -B 1 -A <cdna_file>

  The "-B 1" option pre-loads the genomic indices only into RAM.
  The "-B 2" option pre-loads both the indices and genome into RAM.
  For increased speed, the genomic indices are far more important
  than the genome for pre-loading into RAM.

  Guidelines: The "-B 1" option pre-loads the <genome>.idxpositions
  file.  The "-B 2" option pre-loads that file, plus the 
  <genome>.genomecomp file.  Look at the sizes of these files to
  determine if you have enough RAM to hold them in memory continuously.
  Note that other programs running on your computer also need RAM.


* Multithreaded mode: If your machine has several processors, you can
  make batch mode run even faster by specifying multiple threads with
  the -t flag:

    gmap -d NHGD_R35 -B 1 -A -t <nthreads> <cdna_file>

  Note that with multiple threads, the output results will appear in
  random order, depending on which thread finishes its computation
  first.  If you wish your output to be in the same order as the 
  input cDNA file, add the '-O' (letter O, not the number 0) flag
  to get ordered output.

  Guidelines: The -t flag specifies the number of computational
  threads.  In addition, if your machine supports threads, GMAP
  also uses one thread for reading the input query sequences, and
  one thread for printing the output results.  Therefore, the
  total number of threads will be 2 plus the number you specify.
  The program will work optimally if it uses one thread per
  available processor.  Note that other programs running on your
  computer also need processors.


* Compressed output: If you want to store the alignment results in a
  compressed format, use the -Z flag.  You can uncompress the results
  by using the gmap_uncompress.pl program:

    gmap -d NHGD_R35 -Z <cdna_file> > x
    cat x | gmap_uncompress


Defining chromosome subsets (for advanced use only)
===================================================

GMAP has the ability to restrict its search of the genome to a subset
of the available chromosomes.  A user may specify a chromosomal subset
with the "-c" flag to GMAP.  The available chromosome subsets are
listed in the chrsubset file in the GMAP database.  In our running
example, this would be the file

    /path/to/gmapdb/NHGD_R35/NHGD_R35.chrsubset

The gmap_setup process automatically creates a file by this name, and
pre-defines some basic subsets in that file, namely the subset "all"
(which stands for all chromosomes) and a subset for each individual
chromosome.

However, you may edit this file manually to define your own chromosome
subsets, using a FASTA-like syntax.  Chromosome subsets can be defined
either by listing the chromosomes to be included (i.e., starting the
line with a plus '+' sign), or by listing those to be excluded (i.e.,
starting the line with a minus '-' sign).  For example, if you wish to
exclude chromosomes that contain unmapped contigs (such as "22U"), you
can add the following lines to the chrsubset file:

    >vanilla
    -1U,2U,3U,4U,5U,6U,7U,8U,9U,10U,12U,13U,15U,16U,17U,18U,19U,22U,XU

Equivalently, this subset could have been defined inclusively:

    >vanilla
    +1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,MT,X,Y

The user may then restrict his search to these chromosomes by
providing the "-c vanilla" flag to GMAP.  If the user does not specify
any chromosome subset, then the default subset is used.  The default
subset is the first one in the chrsubset file.

The user also has the option, with the "-C" flag to GMAP, of
specifying a chrsubset file other than the one in the GMAPDB
directory.


Building map files (for advanced use only)
==========================================

This package includes an implementation of interval index trees
(IITs), which permits efficient lookup of interval information.  The
gmap program also allows you (with its -m flag) to look up pre-mapped
annotation information that overlaps your query cDNA sequence.  These
interval index trees (or map files) are built using the iit_store
program included in this package.  To build a map file, do the
following:

Step 1: Put your map information for a given genome (e.g. NHGD_R35)
into a FASTA file with the following format:
   
    >label start end optional_tag
    optional_annotation (which may be multiple lines)

For example, the label may be an EST accession, with the start and end
numbers representing their position in the genome database, and the
tag indicating whether the EST aligns to the forward or reverse strand.

The start and end values must be in universal coordinates, which are
the coordinates when chromosomes are concatenated.  The GMAP program
provides these coordinates in its alignments.  In addition, the
get-genome program can translate chromosomal coordinates to universal
coordinates with its -C flag:

    get-genome -d NHGD_R35 -C 22:10000..11000


Step 2: Run iit_store on this FASTA file, and put the file into the
maps subdirectory of the corresponding genome directory.  The file
should end with ".iit"; if you don't specify this to the -o flag, the
program will add ".iit" to the filename.

    iit_store -o myannot myannot.fa

Now you can retrieve this information with iit_get

    iit_get myannot.iit start [optional_end [optional_tag]]

You can also retrieve this information with gmap, if you store the map
file in the appropriate genome database, like this

    mv myannot.iit /path/to/genome/directory/NHGD_R35/NHGD_R35.maps/

Then you can retrieve map information for a given cDNA sequence by
specifying the desired map file with the -m flag:

   gmap -d NHGD_R35 -m myannot <cdna_file>

