#! @PERL@ -w
# $Id: fa_coords.pl.in,v 1.7 2005/05/10 02:18:14 twu Exp $

#$package_version = "@PACKAGE_VERSION@";

use IO::File;
undef($opt_o);			# Output file
undef($opt_E);			# Interpret argument as a command
use Getopt::Std;
getopts("o:E");

# Usage: fa_coords [-o <output>] [-E] <fastafiles or command>

if (!defined($outfile = $opt_o)) {
  $outfile = "coords.txt";
}

$flags = "";
$flags .= "-o $outfile";

$OUT = new IO::File(">$outfile") or die "Cannot write to file $outfile";
print $OUT "#contig" . "\t" . "coordinates" . "\t" . "altstrain\n";
$skipped = parse_fa_files($OUT,\@ARGV);
close($OUT);

if ($#$skipped >= 0) {
  printf "\n";
  printf STDOUT ("*** %d contigs had no recognizable chromosomal assignment, and\n",$#$skipped + 1);
  print STDOUT   "    were concatenated into a chromosome called \"NA\" ***\n";
  print STDOUT "If you do not wish to include these contigs, please remove them from $outfile,\n";
  print STDOUT "or comment them out with the # character at the beginning of each line.\n";
  print "\n";
}


@errors = ();
foreach $chr (keys %lowest) {
  if ($lowest{$chr} > 1) {
    push @errors,"  First contig in chromosome $chr starts at position $lowest{$chr}";
  }
}

if ($#errors >= 0) {
  print STDOUT "\n";
  print STDOUT "*** Possible errors: ***\n";
  foreach $error (@errors) {
    print $error . "\n";
  }
  print STDOUT "\n";
  print STDOUT "  Some the errors above may be addressed by specifying the contigs to be on\n";
  print STDOUT "  alternate strains of existing chromosomes, rather than on independent\n";
  print STDOUT "  alternate chromosomes.\n";
  print STDOUT "  You may make the appropriate changes in $outfile, by adding an alternate\n";
  print STDOUT "  strain in column 3, and specifying an existing chromosome in column 2\n";
  print STDOUT "\n";
}

print STDOUT "\n";
print STDOUT "============================================================\n";
print STDOUT "Contig mapping information has been written to file $outfile.\n";
if ($#errors >= 0) {
  printf STDOUT ("%d possible errors were found (listed above)\n",$#errors+1);
}
print STDOUT "\n";
print STDOUT "Now look at $outfile (you may edit it manually if you wish)\n";
print STDOUT "and then run\n";
print STDOUT "\n";
if ($outfile ne "coords.txt") {
  print STDOUT "    gmap_setup -c $outfile -d <db_name> <fastafiles>\n";
} else {
  print STDOUT "    gmap_setup -d <db_name> <fastafiles>\n";
}
print STDOUT "\n";
print STDOUT "where you decide on the db_name, and the fastafiles are the\n";
print STDOUT "same you used in running this fa_coords program.\n";
print STDOUT "\n";
print STDOUT "Note that gmap_setup can take a while to index a large genome\n";
print STDOUT "============================================================\n";
print STDOUT "\n";


exit;



sub parse_fa_files {
  my ($OUT, $argv) = @_;
  my ($FP, $line, $strain);
  my @skipped = ();
  my $seglength;

  foreach $arg (@ {$argv}) {
    if (defined($opt_E)) {
      printf STDERR "Executing command $arg\n";
      $FP = new IO::File("$arg |") or die "Can't execute $arg";
    } else {
      printf STDERR "Opening file $arg\n";
      $FP = new IO::File("$arg") or die "Can't open file $arg";
    }
    $seglength = 0;
    undef($orientation);
    while (defined($line = <$FP>)) {
      chop $line;
      if ($line !~ /\S/) {
	# Skip blank lines

      } elsif ($line !~ /^>/) {
	if (defined($chr)) {
	  $seglength += length($line);
	}

      } else {
	# Handle previous contig
	if ($seglength > 0) {
	  printf STDERR ("%d (length = %d nt)",$chrpos{$chr}+$seglength-1,$seglength);
	  if (defined($orientation) && $orientation eq "rev") {
	    printf STDERR (" (revcomp => %s:%d..%d)",$chr,$chrpos{$chr}+$seglength-1,$chrpos{$chr});
	  }
	  print STDERR "\n";

	  if (defined($orientation) && $orientation eq "rev") {
	    printf $OUT ("%s\t%s:%d..%d\n",$contig,$chr,$chrpos{$chr}+$seglength-1,$chrpos{$chr});
	  } else {
	    printf $OUT ("%s\t%s:%d..%d\n",$contig,$chr,$chrpos{$chr},$chrpos{$chr}+$seglength-1);
	  }
	  if (!defined($lowest{$chr})) {
	    $lowest{$chr} = $chrpos{$chr};
	  } elsif ($chrpos{$chr} < $lowest{$chr}) {
	    $lowest{$chr} = $chrpos{$chr};
	  }
	  $chrpos{$chr} += $seglength; # Used only when a header doesn't have a chrpos for this chr
	}

	# Handle current header
	print STDERR "  Header line: $line\n";
	$seglength = 0;
	($contig) = $line =~ /^>(\S+)/;
	undef $orientation;
	if ($line =~ /\/chr=(\S+):(\d+)\D+\d+/) {
	  $chr = $1;
	  $chrpos{$chr} = $2;

	} elsif ($line =~ /\/chr=(\S+)/) {
	  $chr = $1;

	} elsif ($line =~ /chromosome:[^:]+:([^:]+):(\d+)/) {
	  # Ensembl format: chromosome:NCBI35:22:1:49554710:1
	  $chr = $1;
	  $chrpos{$chr} = $2;

	  if ($chr =~ /(\S+?)_N\D_\d+/) {
	    # Ensembl notation for unmapped contig
	    $chr = $1 . "U";
	  }

	} elsif ($line =~ /\/chromosome=\S+/) {
	  # Celera format
	  ($chr) = $line =~ /\/chromosome=(\S+)/;
	  if ($line =~ /\/alignment=\((\d+)-\d+\)/) {
	    ($chrpos{$chr}) = $1;
	    $chrpos{$chr} += 1;	# Because Celera uses 0-based coordinates
	  }
	  if ($line =~ /\/orientation=rev/) {
	    $orientation = "rev";
	  }

	} elsif ($line =~ /chr(\S+):(\d+)\D+\d+/) {
	  $chr = $1;
	  $chrpos{$chr} = $2;

	} elsif ($line =~ /chr(\S+)/) {
	  $chr = $1;

	} else {
	  print STDERR "  Can't find chromosome in header.  Assigning to chromosome NA instead.";
	  $chr = "NA";
	  push @skipped,$contig;
	}

	if (!defined($chrpos{$chr})) {
	  $chrpos{$chr} = 1;	# Start this contig at beginning of chromosome
	}
	printf STDERR ("  Processing contig %s at chromosomal coordinates %s:%d..",
		       $contig,$chr,$chrpos{$chr});
      }
    }

    # Handle last contig in the file
    if ($seglength > 0) {
      printf STDERR ("%d (length = %d nt)",$chrpos{$chr}+$seglength-1,$seglength);
      if (defined($orientation) && $orientation eq "rev") {
	printf STDERR (" (revcomp => %s:%d..%d)",$chr,$chrpos{$chr}+$seglength-1,$chrpos{$chr});
      }
      print STDERR "\n";

      if (defined($orientation) && $orientation eq "rev") {
	printf $OUT ("%s\t%s:%d..%d\n",$contig,$chr,$chrpos{$chr}+$seglength-1,$chrpos{$chr});
      } else {
	printf $OUT ("%s\t%s:%d..%d\n",$contig,$chr,$chrpos{$chr},$chrpos{$chr}+$seglength-1);
      }
      if (!defined($lowest{$chr})) {
	$lowest{$chr} = $chrpos{$chr};
      } elsif ($chrpos{$chr} < $lowest{$chr}) {
	$lowest{$chr} = $chrpos{$chr};
      }
    }
    close($FP);
  }

  return \@skipped;
}



